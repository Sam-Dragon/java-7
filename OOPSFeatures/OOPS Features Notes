************************************** OOPS Features ********************************************
- Root of all class is Object class

# Encapsulation
- Wrapping of the fields and its associated methods into a single unit

> Steps to achieve it
1. Mark the variables as private
2. Make the methods as public
3. Expose setter and getter methods
   - for boolean data-types, getter methods can be specified is 'IS' prefix

> Advantages
- Flexibility. 
- Maintainability. 
- Extensibility. Code can be extendable. i.e Validation can be added later
- Prevents overwriting of code
- same variables can be used in different class


# Inheritance
- Accessing the features of sub class by the super class
- It can be done in two ways 'IS-A' & 'HAS-A' relationship

> Steps to achieve 'IS-A' relationship 
1. Class can only 'extend' another class
2. Class can implement many interface
3. Interface can only 'extend' another interface

> Steps to achieve 'HAS-A' relationship
1. Class must contains the reference of another class in form of variable

> Advantages
- Re-usability
- Polymorphism


# Abstraction
- Hiding the implementation details 
- It say 'What to implement' not 'how to implement'

> Steps to achieve it
- It can be achieved by INTERFACE where you must specify abstract methods
- It can also be achieved by ABSTRACT CLASS where you must specify abstract methods

> Advantages
- Caller of the class must forcibly define its own implementation


# Polymorphism
- It works only on instance methods
- Method with same name but different signatures
- It can be achieved by 
	- STATIC POLYMORPHISM  --> METHOD OVERLOADING
	- DYNAMIC POLYMORPHISM --> METHOD OVERRIDING 

> Steps to achieve method overloading
1. Create two methods with different arguments in same class
2. Create two class under inheritance but the methods must be same but difference in arguments

> Steps to achieve method overriding
1. Create two class with same method
2. Make sure the classes are under inheritance [extends]
3. Sub Class must be override the Super class method

> Advantages
- Re-usability, Flexibility


# Method Overloading
- Method with same name but with different arguments
- Difference in arguments could be based on Number of arguments, Order of arguments (OR)
Data type of arguments
- Method to execute will be decided by compiler at COMPILE TIME
- Method can have same or different return type (OR) access specifier (OR) exceptions
 
> Rules
1. Method names must be same but arguments must be vary either by number of arguments (OR) 
(OR) by data-type of the arguments (OR) by order of the arguments

> Advantages
- Flexibility


# Method Overriding
- Method with same name but with different signatures
- Method to execute will be decided by JVM at RUNTIME
- @Override is marker annotation which ensures the overridden method signature is same
even if you don't specify this annotation, method overriding still works

> Rules [PENDING]
1. Method signatures must have same signature else it will be become overloaded method
2. 

> Advantages
- Flexibility


# Tricky 
- If the wrapper class is used in method with single arguments like Integer, Long etc.. 
then passing null to argument result in compiler error because null is common for wrapper class
- Method accepting double arguments can be passed with direct values without specifying any type 
like 0D, 0d still it works unless there is no method accepting integer argument